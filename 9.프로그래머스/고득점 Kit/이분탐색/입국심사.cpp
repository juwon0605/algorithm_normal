/*
입국심사
문제 설명
n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.
입출력 예
n	times	return
6	[7, 10]	28
입출력 예 설명
가장 첫 두 사람은 바로 심사를 받으러 갑니다.

7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.

10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.

14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.

20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.

출처

※ 공지 - 2019년 9월 4일 문제에 새로운 테스트 케이스를 추가하였습니다. 도움을 주신 weaver9651 님께 감사드립니다.
*/

#include <iostream>
#include <string>
#include <vector>

using namespace std;

long long solution(int n, vector<int> times) {
	long long left = 1;
	long long right = 1000000000000000000;
	long long mid;
	while (left < right) {
		mid = (left + right) / 2;
		long long maxPeople = 0;
		for (int i = 0; i < times.size(); i++) {
			maxPeople += mid / times[i];
		}
		if (maxPeople >= n) {
			right = mid;
		}
		else if (maxPeople < n) {
			left = mid + 1;
		}
	}
	return mid = (left + right) / 2;
}

/*
모범 답안
	
	EX) n = 10, [6, 8, 10], answer = 30
	위와 같이 30초면 11명까지 가능하지만, 29초면 9명까지만 가능한 경우를 미처 생각하지 못했다.
	이럴 때는 right를 줄일 때 mid를 배제하지 않고 줄여야 하고(mid - 1 -> mid)
	mid = left = right가 되어 while이 무한 루프에 빠질 수 있으니 left <= right에서 left < right으로 해주고
	마지막에 mid = (left + right) / 2로 갱신하고 return해야한다!


	시간복잡도
		O(MlogN) (N: 입국심사를 기다리는 사람의 수, M: 심사관의 수)
	공간복잡도
		O(M)
*/