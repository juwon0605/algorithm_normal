/*
문제 7-A
제목 수열 조합하기
내용
서로 다른 N개의 자연수를 나열하는 시퀀스(sequence)의 수는 N!가지가 있
다. 서로 다른 N개의 자연수가 나열된 시퀀스 A가 a1,a2,a3...aN으로 구성
되어있고, 특정 수 x가 주어졌을 때 시퀀스 A를 다음 식을 통해 하나의 숫
자로 변환할 수 있다.
식: x^0 * a1 + x^1 * a2 + ... + x^N-1 * aN mod 1013
이 때, N!가지의 시퀀스를 변환한 숫자 중 주어지는 특정 범위에 들어가는
시퀀스의 가짓수를 출력하시오.
예를 들어 특정 수 x가 4이고, 시퀀스 A가 (2,3,4)로 주어졌을 때, A를 나
열할 수 있는 경우는 (2,3,4), (2,4,3), (3,2,4), (3,4,2), (4,2,3), (4,3,2)과 같
이 6가지가 있다. 이 6가지 수열 중 (2,3,4)에 대하여 위의 식을 적용해보면
4^0 * 2 + 4^1 * 3 + 4^2 * 4 = 2 + 12 + 64 = 78 이고 1013으로 나눈 나머지는
78이다. 다른 5가지 경우에 대해서도 식을 적용해 보면 각각 66, 75, 51,
60, 48이다. 만약 주어지는 특정 범위가 50이상 60이하였다면 주어지는 특
정 범위에 들어가는 시퀀스의 가짓수는 51, 60 이렇게 두 가지이므로 2를
출력한다.
사용 할 수 있는 언어는 C, C++로 제한한다. 프로그램의 실행시간은 5초를
초과할 수 없다. C++의 경우 main 함수 내의 시작 지점에 다음 내용을 추
가함으로써 입력 속도가 개선되는 경우도 있다.
std::ios::sync_with_stdio(false);
입력 형식
입력은 표준입력으로 다음과 같이 주어진다.
1. 첫 번째 줄에는 테스트케이스의 수 T가 주어진다. (T ≤ 100)
2. 두 번째 줄에는 첫 번째 테스트케이스에 대한 서로 다른 자연수의 개수
N(1 ≤ N ≤ 9)이 주어진다.
3. 세 번째 줄에는 N 개의 자연수가 빈칸을 사이에 두고 주어진다. 주어지
는 모든 자연수들은 1,000을 넘지 않는다.
4. 네 번째 줄에는 특정범위를 나타내는 수 a,b(0 ≤ a ≤ b ≤ 1012) 와 특정
수 x(1 ≤ x ≤ 9)가 주어진다.
5. 그 이후에는 위의 2, 3, 4 단계가 T-1번 반복된다.
출력 형식
출력은 표준출력으로 수행하며 총 T줄로 이루어진다. 각 줄에는 각 테스트
케이스 별로 주어진 수들로 생성할 수 있는 시퀀스들 중, 식을 적용하였을
때 해당 값이 특정범위 내에 오게 되는 시퀀스의 가짓수를 출력한다.
예 
입력
2
3
2 3 4
50 60 4
4
17 5 11 201
450 670 3
출력
2
10
*/
#define _CRT_SECURE_NO_WARNINGS

#include<iostream>
using namespace std;

void DFS(int);
int numArr[9];
int flag[9];
int sequence[9];
int n, a, b, x, res;
int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	freopen("input.txt", "rt", stdin);
	int t;
	cin >> t;
	while (t--) {
		cin >> n;
		for (int i = 0; i < n; i++) cin >> numArr[i];
		cin >> a >> b >> x;
		res = 0;
		DFS(0);
		cout << res << endl;
	}
	return 0;
}

void DFS(int L) {
	if (L == n) {
		int sum = 0;
		int temp = 1;
		for (int i = 0; i < n; i++) {
			sum += (temp * sequence[i]) % 1013;
			temp *= x;
		}
		if (sum % 1013 >= a && sum % 1013 <= b) res++;
	}
	else {
		for (int i = 0; i < n; i++) {
			if (flag[i] == 0) {
				flag[i] = 1;
				sequence[L] = numArr[i];
				DFS(L + 1);
				flag[i] = 0;
			}
		}
	}
}

/*
모범 답안
	시간 복잡도
		O(TN(N!))
	공간 복잡도
		O(N)
*/